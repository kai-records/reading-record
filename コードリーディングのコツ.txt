その1
極力コードは読まないこと
→他のデベロッパーのことを信頼して実装はちゃんと動くものとする
　たくさんコードを読むと圧倒されるでしょ？



その2
実装は極力見ない見ないようにして、インターフェイスと構造を理解する
→ダイヤグラムや、関係性のグラフを書いたりしながら
　実装はちゃんとできていると信じて、読んでいるメソッドやクラスのインターフェイスの役割やパラメータをしっかり理解するようにする
　読むことを減らして、脳に余裕を生む
　→コードリーディングの正確さとスピードは重要な要素だが、やみくもに頑張るのではなく、いかに脳の負担を減らすかのアプローチが非常に有効



ダメなケース
自分が無理なやり方をしているケース
これが足りない、あれが足りないと思いこんでいる場合
自分にとって難しすぎると感じている時は、たいてい脳の使いかたが間違っているサイン
→才能の差ではなく、脳に余裕のない状態で酷使している可能性が高い
→自己評価が低い＝『自分が～だからこうなのだ』という思い込みはたいてい大きな事実誤認を生む。
　本質は脳の使いかたにある


アウトカム(結果・成果)を急いではいけない
プログラマの場合は、細かい技術の積み重ねが勝負であって、コンサルのように具体的なサービスを提供するさいの『アウトカム(結果・成果)』の勝負ではない
アウトカムに集中すると一時的には良くても、中長期の『生産性』は上がらない
→技術は地味な積み重ねこそ進化がやどる


